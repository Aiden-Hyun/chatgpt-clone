-- Initialize schema for ChatGPT Clone
-- Migration: 20250720152854_init_chat_schema.sql

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create profiles table to store user profile information
CREATE TABLE IF NOT EXISTS profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  display_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create chatrooms table
CREATE TABLE IF NOT EXISTS chatrooms (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  model TEXT DEFAULT 'gpt-3.5-turbo' NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  
  -- Enforce unique chatroom names per user
  CONSTRAINT unique_user_chatroom_name UNIQUE (user_id, name)
);

-- Create messages table
CREATE TABLE IF NOT EXISTS messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_id BIGINT REFERENCES chatrooms(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  role TEXT CHECK (role IN ('user', 'assistant', 'system')) NOT NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_messages_room_id ON messages(room_id);
CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);
CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);
CREATE INDEX IF NOT EXISTS idx_chatrooms_user_id ON chatrooms(user_id);
CREATE INDEX IF NOT EXISTS idx_chatrooms_updated_at ON chatrooms(updated_at);

-- Set up Row Level Security (RLS)
-- Enable RLS on tables
ALTER TABLE chatrooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Create policies for chatrooms
CREATE POLICY chatrooms_select_policy ON chatrooms
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY chatrooms_insert_policy ON chatrooms
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY chatrooms_update_policy ON chatrooms
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY chatrooms_delete_policy ON chatrooms
  FOR DELETE USING (auth.uid() = user_id);

-- Create policies for messages
CREATE POLICY messages_select_policy ON messages
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY messages_insert_policy ON messages
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY messages_update_policy ON messages
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY messages_delete_policy ON messages
  FOR DELETE USING (auth.uid() = user_id);

-- Create policies for profiles
CREATE POLICY profiles_select_policy ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY profiles_insert_policy ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY profiles_update_policy ON profiles
  FOR UPDATE USING (auth.uid() = id);

-- Create function to handle user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, display_name)
  VALUES (new.id, new.email, new.raw_user_meta_data->>'name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for new user creation
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Create function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for timestamp updates
CREATE TRIGGER update_chatrooms_updated_at
  BEFORE UPDATE ON chatrooms
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_messages_updated_at
  BEFORE UPDATE ON messages
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();